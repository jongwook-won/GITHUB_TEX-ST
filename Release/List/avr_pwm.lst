###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.10.1.50424 for Atmel AVR        31/Aug/2022  16:54:39 #
# Copyright 1996-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\LUCID 신뢰성\CN_BOARD\source\avr_pwm.c                #
#    Command line =  "D:\LUCID 신뢰성\CN_BOARD\source\avr_pwm.c" --cpu=m128   #
#                    -ms -o "D:\LUCID 신뢰성\CN_BOARD\Release\Obj\" -D        #
#                    NDEBUG -lCN "D:\LUCID 신뢰성\CN_BOARD\Release\List\"     #
#                    -lb "D:\LUCID 신뢰성\CN_BOARD\Release\List\" -y          #
#                    --initializers_in_flash -DENABLE_BIT_DEFINITIONS -e      #
#                    --eeprom_size 4096 --clib -Ohz                           #
#    List file    =  D:\LUCID 신뢰성\CN_BOARD\Release\List\avr_pwm.lst        #
#    Object file  =  D:\LUCID 신뢰성\CN_BOARD\Release\Obj\avr_pwm.r90         #
#                                                                             #
#                                                                             #
###############################################################################

D:\LUCID 신뢰성\CN_BOARD\source\avr_pwm.c
      1          #include "allinclude.h"

   \                                 In  segment ABSOLUTE, at 0x84
   \   union <unnamed> volatile __io _A_OCR3B
   \                     _A_OCR3B:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x86
   \   union <unnamed> volatile __io _A_OCR3A
   \                     _A_OCR3A:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x8a
   \   union <unnamed> volatile __io _A_TCCR3B
   \                     _A_TCCR3B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x8b
   \   union <unnamed> volatile __io _A_TCCR3A
   \                     _A_TCCR3A:
   \   00000000                      DS8 1
      2          

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
      3          unsigned int OCR3A_VAL = 0    ;
   \                     OCR3A_VAL:
   \   00000000                      DS8 2
   \   00000002                      REQUIRE `?<Initializer for OCR3A_VAL>`
      4          unsigned int OCR3B_VAL = 0    ;
   \                     OCR3B_VAL:
   \   00000002                      DS8 2
   \   00000004                      REQUIRE `?<Initializer for OCR3B_VAL>`
      5          unsigned int DUTY_VAL  = 100  ;
   \                     DUTY_VAL:
   \   00000004                      DS8 2
   \   00000006                      REQUIRE `?<Initializer for DUTY_VAL>`
      6          unsigned int cur_DUTY_VAL = 100;
   \                     cur_DUTY_VAL:
   \   00000006                      DS8 2
   \   00000008                      REQUIRE `?<Initializer for cur_DUTY_VAL>`
      7          

   \                                 In  segment CODE, align 2, keep-with-next
      8          void Timer3_pwm_initial(void)
   \                     Timer3_pwm_initial:
      9          {
   \   00000000   93BA               ST      -Y, R27
   \   00000002   2FFA               MOV     R31, R26
     10          
     11              
     12          //SFR_B_N(0x8A, TCCR3B, ICNC3, ICES3, Dummy5, WGM33, WGM32, CS32, CS31, CS30)         /* Timer/Counter 3 Control Register B */
     13          //SFR_B_N(0x8B, TCCR3A, COM3A1, COM3A0, COM3B1, COM3B0, COM3C1, COM3C0, WGM31, WGM30) /* Timer/Counter 3 Control Register A */
     14          //SFR_B_N(0x8C, TCCR3C, FOC3A, FOC3B, FOC3C, Dummy4, Dummy3, Dummy2, Dummy1, Dummy0)/* Timer/Counter 3 Control Register C */    
     15              
     16              //COM3A1, COM3A0, COM3B1, COM3B0, COM3C1, COM3C0, WGM31, WGM30) /* Timer/Counter 3 Control Register A */
     17              TCCR3A = 0x21;		// Phase and Frequency Correct PWM mode(9) TONR1A(TOP), no OC1A, output OC1B, no OC1C   //OC1B가 MATCH에서 CLEAR, BOTTOM에서 SET된다. 
   \   00000004   E201               LDI     R16, 33
   \   00000006   9300....           STS     _A_TCCR3A, R16
     18              //ICNC3, ICES3, Dummy5, WGM33, WGM32, CS32, CS31, CS30)         /* Timer/Counter 3 Control Register B */
     19          	TCCR3B = 0x13;		// Pre-scale : 64
   \   0000000A   E103               LDI     R16, 19
   \   0000000C   9300....           STS     _A_TCCR3B, R16
     20              
     21          	OCR3A_VAL = 125000 / 120;			 // 주파수에 따른 OCR3A에 대입하는 값 계산.    60hz
   \   00000010   ....               LDI     R26, LOW(OCR3A_VAL)
   \   00000012   ....               LDI     R27, (OCR3A_VAL) >> 8
   \   00000014   E101               LDI     R16, 17
   \   00000016   E014               LDI     R17, 4
   \   00000018   930D               ST      X+, R16
   \   0000001A   931C               ST      X, R17
   \   0000001C   9613               ADIW    R27:R26, 3
     22          	OCR3AH = ( OCR3A_VAL >> 8 );
   \   0000001E   93100087           STS     135, R17
     23          	OCR3AL =   OCR3A_VAL & 0xFF; 
   \   00000022   9300....           STS     _A_OCR3A, R16
     24          	
     25              
     26          	OCR3B_VAL = (unsigned long)OCR3A_VAL * DUTY_VAL / 100;	 // OCR3A입력값으로 OCR1B에 대입하는 값 계산.
   \   00000026   910D               LD      R16, X+
   \   00000028   911C               LD      R17, X
   \   0000002A   9713               SBIW    R27:R26, 3
   \   0000002C   E020               LDI     R18, 0
   \   0000002E   E030               LDI     R19, 0
   \   00000030   E141               LDI     R20, 17
   \   00000032   E054               LDI     R21, 4
   \   00000034   E060               LDI     R22, 0
   \   00000036   E070               LDI     R23, 0
   \   00000038   ........           CALL    ?L_EC_MUL_L03
   \   0000003C   E644               LDI     R20, 100
   \   0000003E   E050               LDI     R21, 0
   \   00000040   ........           CALL    ?UL_DIVMOD_L03
   \   00000044   930D               ST      X+, R16
   \   00000046   931C               ST      X, R17
     27          	OCR3BH = ( OCR3B_VAL >> 8 );
   \   00000048   ....               RCALL   ?Subroutine0
     28          	OCR3BL =   OCR3B_VAL & 0xFF; 
     29          }
   \                     ??CrossCallReturnLabel_0:
   \   0000004A   2FAF               MOV     R26, R31
   \   0000004C                      REQUIRE ?Subroutine1
   \   0000004C                      REQUIRE _A_TCCR3A
   \   0000004C                      REQUIRE _A_TCCR3B
   \   0000004C                      REQUIRE _A_OCR3A
   \   0000004C                      REQUIRE _A_OCR3B
   \   0000004C                      ;               // Fall through to label ?Subroutine1

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   91B9               LD      R27, Y+
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   93100085           STS     133, R17
   \   00000004   9300....           STS     _A_OCR3B, R16
   \   00000008   9508               RET
     30          

   \                                 In  segment CODE, align 2, keep-with-next
     31          void pwm_dimming_fun(void)
   \                     pwm_dimming_fun:
     32          {
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
     33            if(PC_pwm_flag & 0x02){ 
   \   00000004   ....               LDI     R26, LOW(OCR3A_VAL)
   \   00000006   ....               LDI     R27, (OCR3A_VAL) >> 8
   \   00000008   9100....           LDS     R16, PC_pwm_flag
   \   0000000C   FF01               SBRS    R16, 1
   \   0000000E   C02E               RJMP    ??pwm_dimming_fun_0
     34              
     35              OCR3B_VAL = (unsigned long)OCR3A_VAL * pc_duty_100 / 100;	 // OCR3A입력값으로 OCR1B에 대입하는 값 계산.
   \   00000010   914D               LD      R20, X+
   \   00000012   915C               LD      R21, X
   \   00000014   9711               SBIW    R27:R26, 1
   \   00000016   ....               LDI     R30, LOW(pc_duty_100)
   \   00000018   ....               LDI     R31, (pc_duty_100) >> 8
   \   0000001A   8160               LD      R22, Z
   \   0000001C   8171               LDD     R23, Z+1
   \   0000001E   2422               CLR     R2
   \   00000020   9F57               MUL     R21, R23
   \   00000022   0190               MOVW    R19:R18, R1:R0
   \   00000024   9F46               MUL     R20, R22
   \   00000026   0180               MOVW    R17:R16, R1:R0
   \   00000028   9F56               MUL     R21, R22
   \   0000002A   0D10               ADD     R17, R0
   \   0000002C   1D21               ADC     R18, R1
   \   0000002E   1D32               ADC     R19, R2
   \   00000030   9F74               MUL     R23, R20
   \   00000032   0D10               ADD     R17, R0
   \   00000034   1D21               ADC     R18, R1
   \   00000036   1D32               ADC     R19, R2
   \   00000038   E644               LDI     R20, 100
   \   0000003A   E050               LDI     R21, 0
   \   0000003C   E060               LDI     R22, 0
   \   0000003E   E070               LDI     R23, 0
   \   00000040   ........           CALL    ?UL_DIVMOD_L03
   \   00000044   01FD               MOVW    R31:R30, R27:R26
   \   00000046   8302               STD     Z+2, R16
   \   00000048   8313               STD     Z+3, R17
     36              OCR3BH = ( OCR3B_VAL >> 8 );
   \   0000004A   ....               RCALL   ?Subroutine0
     37              OCR3BL =   OCR3B_VAL & 0xFF;
     38              PC_pwm_flag &= ~0x02;
   \                     ??CrossCallReturnLabel_1:
   \   0000004C   ....               LDI     R30, LOW(PC_pwm_flag)
   \   0000004E   ....               LDI     R31, (PC_pwm_flag) >> 8
   \   00000050   8100               LD      R16, Z
   \   00000052   7F0D               ANDI    R16, 0xFD
   \   00000054   8300               ST      Z, R16
     39              
     40              printf("set ok pc_duty_100 = %d\r\n",pc_duty_100);
   \   00000056   ....               LDI     R30, LOW(pc_duty_100)
   \   00000058   ....               LDI     R31, (pc_duty_100) >> 8
   \   0000005A   8100               LD      R16, Z
   \   0000005C   8111               LDD     R17, Z+1
   \   0000005E   931A               ST      -Y, R17
   \   00000060   930A               ST      -Y, R16
   \   00000062   ....               LDI     R16, LOW(`?<Constant "set ok pc_duty_100 = ...">`)
   \   00000064   ....               LDI     R17, (`?<Constant "set ok pc_duty_100 = ...">`) >> 8
   \   00000066   ........           CALL    printf
   \   0000006A   9622               ADIW    R29:R28, 2
     41            }
     42            cur_DUTY_VAL = 200; // MANUAL DUTY로 전환되면 처음 값 WRITE되도록 변수값을 이상하게 설정 
   \                     ??pwm_dimming_fun_0:
   \   0000006C   EC08               LDI     R16, 200
   \   0000006E   E010               LDI     R17, 0
   \   00000070   01FD               MOVW    R31:R30, R27:R26
   \   00000072   8306               STD     Z+6, R16
   \   00000074   8317               STD     Z+7, R17
     43          }
   \   00000076   91A9               LD      R26, Y+
   \   00000078   ....               RJMP    ?Subroutine1
   \   0000007A                      REQUIRE _A_OCR3B

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "set ok pc_duty_10`:
   \   00000000   657320746B6F       DC8 "set ok pc_duty_100 = %d\015\012"
   \              70205F637564
   \              7974315F3030
   \              3D2025200D64
   \              000A        

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for OCR3A_VAL>`:
   \   00000000   0000               DC16 0
   \                     `?<Initializer for OCR3B_VAL>`:
   \   00000002   0000               DC16 0
   \                     `?<Initializer for DUTY_VAL>`:
   \   00000004   0064               DC16 100
   \                     `?<Initializer for cur_DUTY_VAL>`:
   \   00000006   0064               DC16 100

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "set ok pc_duty_100 = ...">`:
   \   00000000                      DS8 26
   \   0000001A                      REQUIRE `?<Initializer for <Constant "set ok pc_duty_10`

   Maximum stack usage in bytes:

     Function           CSTACK RSTACK
     --------           ------ ------
     Timer3_pwm_initial     2      4
     pwm_dimming_fun        4      4
       -> printf            4      2


   Segment part sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     _A_OCR3B                                          2
     _A_OCR3A                                          2
     _A_TCCR3B                                         1
     _A_TCCR3A                                         1
     OCR3A_VAL                                         8
     OCR3B_VAL
     DUTY_VAL
     cur_DUTY_VAL
     Timer3_pwm_initial                               76
     ?Subroutine1                                      4
     ?Subroutine0                                     10
     pwm_dimming_fun                                 122
     ?<Initializer for <Constant "set ok pc_duty_10   26
     ?<Initializer for OCR3A_VAL>                      8
     ?<Constant "set ok pc_duty_100 = ...">           26
      Others                                           7

 
   6 bytes in segment ABSOLUTE
 212 bytes in segment CODE
   7 bytes in segment INITTAB
  34 bytes in segment NEAR_I
  34 bytes in segment NEAR_ID
 
 246 bytes of CODE memory (+ 7 bytes shared)
  34 bytes of DATA memory (+ 6 bytes shared)

Errors: none
Warnings: none
